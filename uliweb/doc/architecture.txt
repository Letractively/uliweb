================
Architecture
================

Organization
--------------

One uliweb site should be consisted by one single app or multiple apps, so you
should organize your site project in apps folder. The folder structure should
be look like this::

    yourproject/
        __init__.py
        manage.py
        app.yaml
        gae_handler.py
        uliweb/
        apps/
            __init__.py
            settings.py
            app1/
                __init__.py
                settings.py
                templates/
                static/
            app2/
                __init__.py
                settings.py
                templates/
                static/
            
``apps`` and each app folder should be python package, so there should be 
``__init__.py`` in each folder. 

Management Tool
~~~~~~~~~~~~~~~~~

In your site folder, there should be a manage.py tool, and you can use it to
start development web server and test your site. For now, you can::

    manage.py runserver
    
to start the dev server. Other functionalites are under constructing.

uliweb subfolder
~~~~~~~~~~~~~~~~~

Core components are self-included, so for simple project, you should need to 
download module. For now, uliweb has used some execellent modules, such as:
`webob <http://pythonpaste.org/webob/>`_, `werkzeug <http://werkzeug.pocoo.org/>`_,
and also some modules ported from `web2py <http://mdp.cti.depaul.edu/>`_, 
such as: template.py.

app.yaml and gae_handler.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use uliweb in GAE(Google Application Engine) now, just modify 
application option to your project name in app.yaml. Then develop with uliweb.

apps folder
~~~~~~~~~~~~~~~~~~

All app should be put in ``apps`` folder. They are not isolated, but these apps
will consist one project, it's not like web2py, just like django.

Design
--------

MVT
~~~~~~~~

Just like django, uliweb is also a MVT(Model-View-Template) pattern, there
is no controller layer. But for now, model layer has not defined yet, so 
there is only View and Template.

For view layer, you can use function to define view function, for example::

    @expose('/index')
    def index():
        return {}
        
View function will be run in an environment, it's similar with web2py. But
uliweb doesn't use ``exec`` to run the code, but inject environment objects
and variable into ``__builtin__`` module and func.func_globals. So you can 
directly use these objects in module level or function level without importing
them. 

For now, ``expose`` and ``plugin`` are inject in ``__builtin__`` module, and others
are injected in func.func_globals.

Settings
~~~~~~~~~~~~~

In ``apps`` folder, you can put a ``settings.py``, you can put global settings in it.
It's just a normal python source file, so you can write anything. But you should
remember that **ALL SETTINGS NAME SHOULD BE UPPERCASE**. This rule just like 
django. And each app can also has a ``settings.py`` in it's folder. And uliweb
will merge these settings into one dict variable ``config``, and you can use it
in views or template environment. So ``config`` will contain all merged setting 
options. And if some options has the same name in global settings.py file
and app settings.py file, app setting option will override the global one. So
if you don't want to override the global setting option, you should not use 
the same name in global settings.py file. And if there are the same name in 
different apps, it'll depend on which one is the lastest processed.

So you can write initial code in settings, it'll be automatically imported 
when the project starting. In view functions, you can use ``config`` to access
the setting options. And you can also import settings.py yourself, for global
settings.py::

    import apps.settings

for app settings.py:

    import apps.app.settings
    
