============
Uliweb 简介
============

这是我新挖的一个坑，不过已经填了些土了。它是什么呢？它是我写的一个 web
framework 。怎么连我也造轮呢？记得我以前是更注重向现有框架做贡献的呀。

首先这个框架是一个试验品，或者说是主要是个人使用，因此我将有完全的控制权，
这一点很重要。我可以用它学到许多框架的知识。以前只是使用，学习，象学过：
cherrypy, Karrigell, snakelets 等，不过没有做过什么开发； zope 则是我学得最
早了，不过也早就放弃了； django 投入的精力最多，也开发了不少东西；再后来就
是 web2py 了，不过重用搞得我很不爽，而且有些想法不被认同。但这些更多的还是
集中在开发方面，对于框架本身了解有限，这次造轮是一个好机会。

其次用过的框架都有不让人满意的，而且许多观点也不被认同，因此我想信只有自已
的才是最好的。就象我当初离开 drPython 自已创建了 UliPad 一样，想怎么做怎么
么，很爽，这下子变成别人的观点将不被我认同了 ( 是不是有些小人得志的感觉 ) 
？不过现实如此，我也很清楚地早就认识到这一点。因此要么你的努力被社区认同，
要么另起炉灶，这种例子太多了，不然也不会有这么多的选择。那么 django 不让我
满意的象模板，虽然对设计者友好，但是对程序员不友好，不想细说了。开发还不够
简洁，在我写完 Django Step by Step 教程之后我已经意识到，用它作为入门的还不
如使用 Karrigell 。太多需要知道的。不过这个也不好解决，功能随着复杂，自然会
越来越难。而且这种不简洁是与 web2py 相比的结果。在学了 web2py 才知道 web 也
可以这样开发，集成在浏览器几乎可以做一切事，自动的 ticket ，适合程序员的模
板系统，自动维护的数据库模块，最少配置开发，约定 url 规则，这一些与 django 
相比显得很轻巧和方便。如果你看过代码，的确要比 django 简单，但是说句实话，
因为只是个人项目难免代码的风格和技术要逊于 django 。不过由于设计上不方便重
用， url 的固定方式(虽然支持 routing 的修改，但是还是不够方便)，因此仍然让
我感到遗憾。而 web2py 的设计上的修改很有可能是对 web2py 的某种否定，所以在
我看来它无法按我满意的方向发展。不过 web2py 的作者 Massimo 是一个非常让人敬
佩的人，非常有创造力和激情。

所以作为尝试，我打算自已做一个框架，也许用在自已的项目中，也许是放在 GAE 上
用。现在已经有一个雏型了。目前项目地址在
http://code.google.com/p/uliweb 你可以使用 svn 将代码取下来。同时我还在 GAE 上
创建 http://uliwebproject.appspot.com 站点，用于发布uliweb相关的信息，并且
它本身就是使用 Uliweb 创建的，因此也是一个非常好的 Demo。如果你有关于 Uliweb 的
问题或建议想讨论，可以加入 http://groups.google.com/group/uliweb 邮件列表
与我一起讨论。

这个项目目前也许不少 Python 的爱好者进行关注，有他们的支持和帮助，希望 Uliweb
可以以良好的方式进行发展。

我希望在 Uliweb 中可以集成我所看到、想到的所有的我认为好的优点，因此可以说它是
一个大杂烩，我目前集中了 :

    * Werkzeug 用它来完成框架的搭建，因为它本来就是用来做框架的
    * webob 用来生成 Request 和 Response 对象，因为 GAE 和 pylons 就使用它
      。本来我是使用 Werkzeug 自带的，不过 ygao 建议我使用 webob ，好就先用
      它，不行再换。
    * 模板使用 web2py 的，不过进行了改造。我还是挺喜欢它可以支持 python 代
      码的方式，虽然块结束时要输入 pass ，不过没关系，可以用来解决使用缩近
      造成的排版问题。
    * 数据库还没有加，这一点目前仍然在思考中。
    * Form处理我将使用我自已写的，不过更接近django的方式。
    * URL mapping 还没有想太好，目前我是采用 Werkzeug 的教程的方式，使用了
      一个 @expose 在每个输出的 view 方法前进行修饰。不过这样的做法需要将所
      有的 view 模块先导入才可以，不知道会不会影响效率。
    * 处理模式为MVT
    * View 目前采用函数方式，如果 View 返回为一个 dict，则会自动套用对应的模板。
    * 组织方式采用django的app方式，你可以在多个app中组织代码，最终形成完整应用。
    * 与 webserver 交互一方面是支持 wsgi 标准，另一方面借用了 web2py 中的
      cherrypy 模块，可以独立部署为服务器，不过只是测了一下，还没有真正加进去。

还有些没有想到或没有实现的东西，比如： i18n 的问题。可能你已经看出，一个框
架要关心的事情真是很多。不过我会一点点完善它。有兴趣你可以关注。那么我会在
我的 Blog 上记录对它的修改，因为是个人项目，所以可能修改得随心所欲。当然欢
迎你参与和讨论。
